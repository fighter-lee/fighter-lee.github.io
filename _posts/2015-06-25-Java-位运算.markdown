---
layout:     keynote
title:      "Java-位运算"
subtitle:   "由 [&0xff] 引发的思考"
date:       2015-05-10
author:     "李洋彪"
header-img: "img/post-bg-js-version.jpg"
tags:
    - Java
---

今天看到转换类中有这么一个方法：

	public static String getMd5(String plainText) {
        try {
            MessageDigest md = MessageDigest.getInstance(new String(encryptType));
            md.update(plainText.getBytes());
            byte b[] = md.digest();
            int i;

            StringBuffer buf = new StringBuffer("");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) {
                    i = i & 0xff;
                }
                if (i < 16) {
                    buf.append("0");
                }
                buf.append(Integer.toHexString(i));
            }
            return buf.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

对其中的几个操作甚是疑惑，其中一个就是 &0xFF

为什么要&0xFF呢，我猜想就是保证数值一致性，所以先写个demo：

	public void test1() {
        byte[]a = new byte[10];
        a[0] = -128;
        System.out.println(a[0]);
        System.out.println(a[0] & 0xff);
    }

我猜想应该都是-127，结果为-127和129

记得在学计算机原理的时候，了解到计算机内的存储都是利用二进制的补码进行存储的。

复习一下（具体位运算见下文）

byte是有符号的，正数的原反补是一样的，如果是一个负数的话，需要取绝对值的反码加一，转成二进制补码进行存储。

当将-127赋值给a[0]时候，a[0]作为一个byte类型，其计算机存储的补码是10000001（8位）。

将a[0] 作为int类型向控制台输出的时候，jvm作了一个补位的处理，因为int类型是32位所以补位后的补码就是1111111111111111111111111 10000001（32位），这个32位二进制补码表示的也是-127.

发现没有，虽然byte->int计算机背后存储的二进制补码由10000001（8位）转化成了1111111111111111111111111 10000001（32位）很显然这两个补码表示的十进制数字依然是相同的。

好比我们拿到的文件流转成byte数组，难道我们关心的是byte数组的十进制的值是多少吗？我们关心的是其背后二进制存储的补码吧

所以大家应该能猜到为什么byte类型的数字要&0xff再赋值给int类型，其本质原因就是想**保持二进制补码的一致性**。

当byte要转化为int的时候，高的24位必然会补1，这样，其二进制补码其实已经不一致了，&0xff可以将高的24位置为0，低8位保持原样。这样做的目的就是为了保证二进制数据的一致性。

当然拉，保证了二进制数据性的同时，如果二进制被当作byte和int来解读，其10进制的值必然是不同的，因为符号位位置已经发生了变化。



现在先回顾一下java的位运算吧。

## 1.1 java支持的位运算符：

&：按位与。

|：按位或。

~：按位非。

^：按位异或。

<<：左位移运算符。

>>：右位移运算符。

<<<：无符号右移运算符。

位运 算 符 中 ,除 ～ 以 外 ,其余 均 为 二 元 运 算 符 。 操 作 数 只 能 为 整 型 和字 符 型 数 据 。

Java使用 补 码 来 表 示 二 进 制 数 ,在补 码 表 示 中 ,最高 位 为 符号 位 ,正数 的 符 号 位 为 0,负数 为 1。补 码 的 规 定 如 下 :

对 正 数 来 说 ,最高位为 0,其余 各 位 代 表 数 值 本 身 (以二 进制 表 示 ),如 +42的补码 为 00101010。

对 负 数 而 言 ,把该 数 绝 对 值 的 补 码 按 位 取 反 ,然后 对 整 个数 加 1,即得 该 数的 补 码 。 如 -1的补 码 为11111111111111111111111111111111(00000000000000000000000000000001按 位 取 反 11111111111111111111111111111110+1=11111111111111111111111111111111 )。为何有那么多0、1，java中int是32位的。

## 1.2   按位与（&）

按位与的运算规则


规则总结：只有两个操作数对应位同为1时，结果为1，其余全为0\. （或者是只要有一个操作数为0，结果就为0）。

## 1.3 按位或（|）

规则总结：只有两个操作数对应位同为0时，结果为0，其余全为1.（或者是只要有一个操作数为1，结果就为1）。

## 1.4按位非（~）

在求负数的源码中使用过。

## 1.5 按位异或（^）

规则总结：异=1,同=0.

## 1.6 左位移（<<）

算术右移（>>）: 符号位不变，低位补0。如：2<<2结果为8。

![image](http://upload-images.jianshu.io/upload_images/4126773-9e7929939693d2c0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

当移动的位数超过数字本身的位数时，那么不就都需要补0操作，实际上不是的，java不可能做那么浪费资源的事情。在真正执行位移前，其对要移动的位数做了一些预处理，比如32处理为0，-1处理为31.

## 1.7 右位移（>>）

低位溢出，符号位不变，并用符号位补溢出的高位。如：-6>>2结果为-2。

![image](http://upload-images.jianshu.io/upload_images/4126773-a1dc37d4963f912c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

## 1.8 无符号右移（>>>）

低位溢出，高位补0。注意，无符号右移（>>>）中的符号位（最高位）也跟着变，无符号的意思是将符号位当作数字位看待。如：-1>>>1结果为2147483647。这个数字应该比较熟悉，看两个输出语句就知道是什么了：

System.*out*.println(Integer.*toBinaryString*(-1>>>1));

System.*out*.println(Integer.*toBinaryString*(Integer.*MAX_VALUE*));

输出结果为：

1111111111111111111111111111111

1111111111111111111111111111111

-1>>>1竟然得到了int所能表示的最大整数，精彩。

![image](http://upload-images.jianshu.io/upload_images/4126773-758d2489fbe3b3cf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

除了使用-1>>>1能得到Integer.MAX_VALUE，以下的也能得到同样的结果：

        //maxInt

        System.*out*.println(~(1 << 31));

        System.*out*.println((1 << -1)-1);

        System.*out*.println(~(1 << -1));

使用位运算往往能很巧妙的实现某些算法完成一些复杂的功能。